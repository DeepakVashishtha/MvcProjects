//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartAdminMvc.Models.DbEntity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GreenFieldEntities : DbContext
    {
        public GreenFieldEntities()
            : base("name=GreenFieldEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<FarmFieldPlantHarvestDataDetail> FarmFieldPlantHarvestDataDetails { get; set; }
        public virtual DbSet<FarmFieldPlantHarvestData> FarmFieldPlantHarvestDatas { get; set; }
        public virtual DbSet<FarmFieldPlant> FarmFieldPlants { get; set; }
        public virtual DbSet<FarmField> FarmFields { get; set; }
        public virtual DbSet<PageDetail> PageDetails { get; set; }
        public virtual DbSet<Pesticide> Pesticides { get; set; }
        public virtual DbSet<Pest> Pests { get; set; }
        public virtual DbSet<ProductMeasurementType> ProductMeasurementTypes { get; set; }
        public virtual DbSet<SecurityLevel> SecurityLevels { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
    
        public virtual ObjectResult<USP_Categories_All_Result> USP_Categories_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Categories_All_Result>("USP_Categories_All");
        }
    
        public virtual int USP_Categories_Delete(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Categories_Delete", categoryIDParameter);
        }
    
        public virtual ObjectResult<USP_Categories_Get_Result> USP_Categories_Get(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Categories_Get_Result>("USP_Categories_Get", categoryIDParameter);
        }
    
        public virtual int USP_Categories_Insert(string categoryName, string description, ObjectParameter categoryID)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Categories_Insert", categoryNameParameter, descriptionParameter, categoryID);
        }
    
        public virtual int USP_Categories_Update(Nullable<int> categoryID, string categoryName, string description)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Categories_Update", categoryIDParameter, categoryNameParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<USP_FarmFields_All_Result> USP_FarmFields_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FarmFields_All_Result>("USP_FarmFields_All");
        }
    
        public virtual int USP_FarmFields_Delete(Nullable<int> farmFieldID)
        {
            var farmFieldIDParameter = farmFieldID.HasValue ?
                new ObjectParameter("FarmFieldID", farmFieldID) :
                new ObjectParameter("FarmFieldID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_FarmFields_Delete", farmFieldIDParameter);
        }
    
        public virtual ObjectResult<USP_FarmFields_Get_Result> USP_FarmFields_Get(Nullable<int> farmFieldID)
        {
            var farmFieldIDParameter = farmFieldID.HasValue ?
                new ObjectParameter("FarmFieldID", farmFieldID) :
                new ObjectParameter("FarmFieldID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FarmFields_Get_Result>("USP_FarmFields_Get", farmFieldIDParameter);
        }
    
        public virtual int USP_FarmFields_Insert(string fieldIDNumber, string fieldName, Nullable<int> supplierID, string legalDescription, Nullable<double> totalAcres, string irrigationSource1, string irrigationSource2, string irrigationSource3, string comments, ObjectParameter farmFieldID)
        {
            var fieldIDNumberParameter = fieldIDNumber != null ?
                new ObjectParameter("FieldIDNumber", fieldIDNumber) :
                new ObjectParameter("FieldIDNumber", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var legalDescriptionParameter = legalDescription != null ?
                new ObjectParameter("LegalDescription", legalDescription) :
                new ObjectParameter("LegalDescription", typeof(string));
    
            var totalAcresParameter = totalAcres.HasValue ?
                new ObjectParameter("TotalAcres", totalAcres) :
                new ObjectParameter("TotalAcres", typeof(double));
    
            var irrigationSource1Parameter = irrigationSource1 != null ?
                new ObjectParameter("IrrigationSource1", irrigationSource1) :
                new ObjectParameter("IrrigationSource1", typeof(string));
    
            var irrigationSource2Parameter = irrigationSource2 != null ?
                new ObjectParameter("IrrigationSource2", irrigationSource2) :
                new ObjectParameter("IrrigationSource2", typeof(string));
    
            var irrigationSource3Parameter = irrigationSource3 != null ?
                new ObjectParameter("IrrigationSource3", irrigationSource3) :
                new ObjectParameter("IrrigationSource3", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_FarmFields_Insert", fieldIDNumberParameter, fieldNameParameter, supplierIDParameter, legalDescriptionParameter, totalAcresParameter, irrigationSource1Parameter, irrigationSource2Parameter, irrigationSource3Parameter, commentsParameter, farmFieldID);
        }
    
        public virtual int USP_FarmFields_Update(Nullable<int> farmFieldID, string fieldIDNumber, string fieldName, Nullable<int> supplierID, string legalDescription, Nullable<double> totalAcres, string irrigationSource1, string irrigationSource2, string irrigationSource3, string comments)
        {
            var farmFieldIDParameter = farmFieldID.HasValue ?
                new ObjectParameter("FarmFieldID", farmFieldID) :
                new ObjectParameter("FarmFieldID", typeof(int));
    
            var fieldIDNumberParameter = fieldIDNumber != null ?
                new ObjectParameter("FieldIDNumber", fieldIDNumber) :
                new ObjectParameter("FieldIDNumber", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var legalDescriptionParameter = legalDescription != null ?
                new ObjectParameter("LegalDescription", legalDescription) :
                new ObjectParameter("LegalDescription", typeof(string));
    
            var totalAcresParameter = totalAcres.HasValue ?
                new ObjectParameter("TotalAcres", totalAcres) :
                new ObjectParameter("TotalAcres", typeof(double));
    
            var irrigationSource1Parameter = irrigationSource1 != null ?
                new ObjectParameter("IrrigationSource1", irrigationSource1) :
                new ObjectParameter("IrrigationSource1", typeof(string));
    
            var irrigationSource2Parameter = irrigationSource2 != null ?
                new ObjectParameter("IrrigationSource2", irrigationSource2) :
                new ObjectParameter("IrrigationSource2", typeof(string));
    
            var irrigationSource3Parameter = irrigationSource3 != null ?
                new ObjectParameter("IrrigationSource3", irrigationSource3) :
                new ObjectParameter("IrrigationSource3", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_FarmFields_Update", farmFieldIDParameter, fieldIDNumberParameter, fieldNameParameter, supplierIDParameter, legalDescriptionParameter, totalAcresParameter, irrigationSource1Parameter, irrigationSource2Parameter, irrigationSource3Parameter, commentsParameter);
        }
    
        public virtual ObjectResult<USP_GETROLE_Result> USP_GETROLE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETROLE_Result>("USP_GETROLE");
        }
    
        public virtual ObjectResult<USP_PageDetails_All_Result> USP_PageDetails_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_PageDetails_All_Result>("USP_PageDetails_All");
        }
    
        public virtual ObjectResult<USP_Pesticides_All_Result> USP_Pesticides_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Pesticides_All_Result>("USP_Pesticides_All");
        }
    
        public virtual int USP_Pesticides_Delete(Nullable<int> pesticideID)
        {
            var pesticideIDParameter = pesticideID.HasValue ?
                new ObjectParameter("PesticideID", pesticideID) :
                new ObjectParameter("PesticideID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Pesticides_Delete", pesticideIDParameter);
        }
    
        public virtual ObjectResult<USP_Pesticides_Get_Result> USP_Pesticides_Get(Nullable<int> pesticideID)
        {
            var pesticideIDParameter = pesticideID.HasValue ?
                new ObjectParameter("PesticideID", pesticideID) :
                new ObjectParameter("PesticideID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Pesticides_Get_Result>("USP_Pesticides_Get", pesticideIDParameter);
        }
    
        public virtual int USP_Pesticides_Insert(string pesticideName, string ratesListedPer, string restrictedUseData, string restrictedEntryLevelData, string pesticideLabelSignalWord, string wPSOralNotification, string toxicity, string formulation, string activeIndegrident, string ePARegistrationNumber, Nullable<int> restrictedEntryInterval, Nullable<double> productRate, Nullable<int> productMeasurementTypeID, Nullable<double> totalProductConsumed, string applicatorName, string certificationNumber, string speed, string mPH, Nullable<double> gPA, Nullable<double> concentration, string sprayRig, string nozzelSetup, string sprayingInstructions, ObjectParameter pesticideID)
        {
            var pesticideNameParameter = pesticideName != null ?
                new ObjectParameter("PesticideName", pesticideName) :
                new ObjectParameter("PesticideName", typeof(string));
    
            var ratesListedPerParameter = ratesListedPer != null ?
                new ObjectParameter("RatesListedPer", ratesListedPer) :
                new ObjectParameter("RatesListedPer", typeof(string));
    
            var restrictedUseDataParameter = restrictedUseData != null ?
                new ObjectParameter("RestrictedUseData", restrictedUseData) :
                new ObjectParameter("RestrictedUseData", typeof(string));
    
            var restrictedEntryLevelDataParameter = restrictedEntryLevelData != null ?
                new ObjectParameter("RestrictedEntryLevelData", restrictedEntryLevelData) :
                new ObjectParameter("RestrictedEntryLevelData", typeof(string));
    
            var pesticideLabelSignalWordParameter = pesticideLabelSignalWord != null ?
                new ObjectParameter("PesticideLabelSignalWord", pesticideLabelSignalWord) :
                new ObjectParameter("PesticideLabelSignalWord", typeof(string));
    
            var wPSOralNotificationParameter = wPSOralNotification != null ?
                new ObjectParameter("WPSOralNotification", wPSOralNotification) :
                new ObjectParameter("WPSOralNotification", typeof(string));
    
            var toxicityParameter = toxicity != null ?
                new ObjectParameter("Toxicity", toxicity) :
                new ObjectParameter("Toxicity", typeof(string));
    
            var formulationParameter = formulation != null ?
                new ObjectParameter("Formulation", formulation) :
                new ObjectParameter("Formulation", typeof(string));
    
            var activeIndegridentParameter = activeIndegrident != null ?
                new ObjectParameter("ActiveIndegrident", activeIndegrident) :
                new ObjectParameter("ActiveIndegrident", typeof(string));
    
            var ePARegistrationNumberParameter = ePARegistrationNumber != null ?
                new ObjectParameter("EPARegistrationNumber", ePARegistrationNumber) :
                new ObjectParameter("EPARegistrationNumber", typeof(string));
    
            var restrictedEntryIntervalParameter = restrictedEntryInterval.HasValue ?
                new ObjectParameter("RestrictedEntryInterval", restrictedEntryInterval) :
                new ObjectParameter("RestrictedEntryInterval", typeof(int));
    
            var productRateParameter = productRate.HasValue ?
                new ObjectParameter("ProductRate", productRate) :
                new ObjectParameter("ProductRate", typeof(double));
    
            var productMeasurementTypeIDParameter = productMeasurementTypeID.HasValue ?
                new ObjectParameter("ProductMeasurementTypeID", productMeasurementTypeID) :
                new ObjectParameter("ProductMeasurementTypeID", typeof(int));
    
            var totalProductConsumedParameter = totalProductConsumed.HasValue ?
                new ObjectParameter("TotalProductConsumed", totalProductConsumed) :
                new ObjectParameter("TotalProductConsumed", typeof(double));
    
            var applicatorNameParameter = applicatorName != null ?
                new ObjectParameter("ApplicatorName", applicatorName) :
                new ObjectParameter("ApplicatorName", typeof(string));
    
            var certificationNumberParameter = certificationNumber != null ?
                new ObjectParameter("CertificationNumber", certificationNumber) :
                new ObjectParameter("CertificationNumber", typeof(string));
    
            var speedParameter = speed != null ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(string));
    
            var mPHParameter = mPH != null ?
                new ObjectParameter("MPH", mPH) :
                new ObjectParameter("MPH", typeof(string));
    
            var gPAParameter = gPA.HasValue ?
                new ObjectParameter("GPA", gPA) :
                new ObjectParameter("GPA", typeof(double));
    
            var concentrationParameter = concentration.HasValue ?
                new ObjectParameter("Concentration", concentration) :
                new ObjectParameter("Concentration", typeof(double));
    
            var sprayRigParameter = sprayRig != null ?
                new ObjectParameter("SprayRig", sprayRig) :
                new ObjectParameter("SprayRig", typeof(string));
    
            var nozzelSetupParameter = nozzelSetup != null ?
                new ObjectParameter("NozzelSetup", nozzelSetup) :
                new ObjectParameter("NozzelSetup", typeof(string));
    
            var sprayingInstructionsParameter = sprayingInstructions != null ?
                new ObjectParameter("SprayingInstructions", sprayingInstructions) :
                new ObjectParameter("SprayingInstructions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Pesticides_Insert", pesticideNameParameter, ratesListedPerParameter, restrictedUseDataParameter, restrictedEntryLevelDataParameter, pesticideLabelSignalWordParameter, wPSOralNotificationParameter, toxicityParameter, formulationParameter, activeIndegridentParameter, ePARegistrationNumberParameter, restrictedEntryIntervalParameter, productRateParameter, productMeasurementTypeIDParameter, totalProductConsumedParameter, applicatorNameParameter, certificationNumberParameter, speedParameter, mPHParameter, gPAParameter, concentrationParameter, sprayRigParameter, nozzelSetupParameter, sprayingInstructionsParameter, pesticideID);
        }
    
        public virtual int USP_Pesticides_Update(Nullable<int> pesticideID, string pesticideName, string ratesListedPer, string restrictedUseData, string restrictedEntryLevelData, string pesticideLabelSignalWord, string wPSOralNotification, string formulation, string activeIndegrident, string ePARegistrationNumber, Nullable<int> restrictedEntryInterval, Nullable<double> productRate, Nullable<int> productMeasurementTypeID, Nullable<double> totalProductConsumed, string applicatorName, string certificationNumber, string speed, string mPH, Nullable<double> gPA, Nullable<double> concentration, string sprayRig, string nozzelSetup, string sprayingInstructions)
        {
            var pesticideIDParameter = pesticideID.HasValue ?
                new ObjectParameter("PesticideID", pesticideID) :
                new ObjectParameter("PesticideID", typeof(int));
    
            var pesticideNameParameter = pesticideName != null ?
                new ObjectParameter("PesticideName", pesticideName) :
                new ObjectParameter("PesticideName", typeof(string));
    
            var ratesListedPerParameter = ratesListedPer != null ?
                new ObjectParameter("RatesListedPer", ratesListedPer) :
                new ObjectParameter("RatesListedPer", typeof(string));
    
            var restrictedUseDataParameter = restrictedUseData != null ?
                new ObjectParameter("RestrictedUseData", restrictedUseData) :
                new ObjectParameter("RestrictedUseData", typeof(string));
    
            var restrictedEntryLevelDataParameter = restrictedEntryLevelData != null ?
                new ObjectParameter("RestrictedEntryLevelData", restrictedEntryLevelData) :
                new ObjectParameter("RestrictedEntryLevelData", typeof(string));
    
            var pesticideLabelSignalWordParameter = pesticideLabelSignalWord != null ?
                new ObjectParameter("PesticideLabelSignalWord", pesticideLabelSignalWord) :
                new ObjectParameter("PesticideLabelSignalWord", typeof(string));
    
            var wPSOralNotificationParameter = wPSOralNotification != null ?
                new ObjectParameter("WPSOralNotification", wPSOralNotification) :
                new ObjectParameter("WPSOralNotification", typeof(string));
    
            var formulationParameter = formulation != null ?
                new ObjectParameter("Formulation", formulation) :
                new ObjectParameter("Formulation", typeof(string));
    
            var activeIndegridentParameter = activeIndegrident != null ?
                new ObjectParameter("ActiveIndegrident", activeIndegrident) :
                new ObjectParameter("ActiveIndegrident", typeof(string));
    
            var ePARegistrationNumberParameter = ePARegistrationNumber != null ?
                new ObjectParameter("EPARegistrationNumber", ePARegistrationNumber) :
                new ObjectParameter("EPARegistrationNumber", typeof(string));
    
            var restrictedEntryIntervalParameter = restrictedEntryInterval.HasValue ?
                new ObjectParameter("RestrictedEntryInterval", restrictedEntryInterval) :
                new ObjectParameter("RestrictedEntryInterval", typeof(int));
    
            var productRateParameter = productRate.HasValue ?
                new ObjectParameter("ProductRate", productRate) :
                new ObjectParameter("ProductRate", typeof(double));
    
            var productMeasurementTypeIDParameter = productMeasurementTypeID.HasValue ?
                new ObjectParameter("ProductMeasurementTypeID", productMeasurementTypeID) :
                new ObjectParameter("ProductMeasurementTypeID", typeof(int));
    
            var totalProductConsumedParameter = totalProductConsumed.HasValue ?
                new ObjectParameter("TotalProductConsumed", totalProductConsumed) :
                new ObjectParameter("TotalProductConsumed", typeof(double));
    
            var applicatorNameParameter = applicatorName != null ?
                new ObjectParameter("ApplicatorName", applicatorName) :
                new ObjectParameter("ApplicatorName", typeof(string));
    
            var certificationNumberParameter = certificationNumber != null ?
                new ObjectParameter("CertificationNumber", certificationNumber) :
                new ObjectParameter("CertificationNumber", typeof(string));
    
            var speedParameter = speed != null ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(string));
    
            var mPHParameter = mPH != null ?
                new ObjectParameter("MPH", mPH) :
                new ObjectParameter("MPH", typeof(string));
    
            var gPAParameter = gPA.HasValue ?
                new ObjectParameter("GPA", gPA) :
                new ObjectParameter("GPA", typeof(double));
    
            var concentrationParameter = concentration.HasValue ?
                new ObjectParameter("Concentration", concentration) :
                new ObjectParameter("Concentration", typeof(double));
    
            var sprayRigParameter = sprayRig != null ?
                new ObjectParameter("SprayRig", sprayRig) :
                new ObjectParameter("SprayRig", typeof(string));
    
            var nozzelSetupParameter = nozzelSetup != null ?
                new ObjectParameter("NozzelSetup", nozzelSetup) :
                new ObjectParameter("NozzelSetup", typeof(string));
    
            var sprayingInstructionsParameter = sprayingInstructions != null ?
                new ObjectParameter("SprayingInstructions", sprayingInstructions) :
                new ObjectParameter("SprayingInstructions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Pesticides_Update", pesticideIDParameter, pesticideNameParameter, ratesListedPerParameter, restrictedUseDataParameter, restrictedEntryLevelDataParameter, pesticideLabelSignalWordParameter, wPSOralNotificationParameter, formulationParameter, activeIndegridentParameter, ePARegistrationNumberParameter, restrictedEntryIntervalParameter, productRateParameter, productMeasurementTypeIDParameter, totalProductConsumedParameter, applicatorNameParameter, certificationNumberParameter, speedParameter, mPHParameter, gPAParameter, concentrationParameter, sprayRigParameter, nozzelSetupParameter, sprayingInstructionsParameter);
        }
    
        public virtual ObjectResult<USP_Pests_All_Result> USP_Pests_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Pests_All_Result>("USP_Pests_All");
        }
    
        public virtual int USP_Pests_Delete(Nullable<int> pestID)
        {
            var pestIDParameter = pestID.HasValue ?
                new ObjectParameter("PestID", pestID) :
                new ObjectParameter("PestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Pests_Delete", pestIDParameter);
        }
    
        public virtual ObjectResult<USP_Pests_Get_Result> USP_Pests_Get(Nullable<int> pestID)
        {
            var pestIDParameter = pestID.HasValue ?
                new ObjectParameter("PestID", pestID) :
                new ObjectParameter("PestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Pests_Get_Result>("USP_Pests_Get", pestIDParameter);
        }
    
        public virtual int USP_Pests_Insert(string pestName, string description, ObjectParameter pestID)
        {
            var pestNameParameter = pestName != null ?
                new ObjectParameter("PestName", pestName) :
                new ObjectParameter("PestName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Pests_Insert", pestNameParameter, descriptionParameter, pestID);
        }
    
        public virtual int USP_Pests_Update(Nullable<int> pestID, string pestName, string description)
        {
            var pestIDParameter = pestID.HasValue ?
                new ObjectParameter("PestID", pestID) :
                new ObjectParameter("PestID", typeof(int));
    
            var pestNameParameter = pestName != null ?
                new ObjectParameter("PestName", pestName) :
                new ObjectParameter("PestName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Pests_Update", pestIDParameter, pestNameParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<USP_ProductMeasurementTypes_All_Result> USP_ProductMeasurementTypes_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ProductMeasurementTypes_All_Result>("USP_ProductMeasurementTypes_All");
        }
    
        public virtual int USP_ProductMeasurementTypes_Delete(Nullable<int> productMeasurementTypeID)
        {
            var productMeasurementTypeIDParameter = productMeasurementTypeID.HasValue ?
                new ObjectParameter("ProductMeasurementTypeID", productMeasurementTypeID) :
                new ObjectParameter("ProductMeasurementTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ProductMeasurementTypes_Delete", productMeasurementTypeIDParameter);
        }
    
        public virtual ObjectResult<USP_ProductMeasurementTypes_Get_Result> USP_ProductMeasurementTypes_Get(Nullable<int> productMeasurementTypeID)
        {
            var productMeasurementTypeIDParameter = productMeasurementTypeID.HasValue ?
                new ObjectParameter("ProductMeasurementTypeID", productMeasurementTypeID) :
                new ObjectParameter("ProductMeasurementTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ProductMeasurementTypes_Get_Result>("USP_ProductMeasurementTypes_Get", productMeasurementTypeIDParameter);
        }
    
        public virtual int USP_ProductMeasurementTypes_Insert(string productMeasurementTypeName, ObjectParameter productMeasurementTypeID)
        {
            var productMeasurementTypeNameParameter = productMeasurementTypeName != null ?
                new ObjectParameter("ProductMeasurementTypeName", productMeasurementTypeName) :
                new ObjectParameter("ProductMeasurementTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ProductMeasurementTypes_Insert", productMeasurementTypeNameParameter, productMeasurementTypeID);
        }
    
        public virtual int USP_ProductMeasurementTypes_Update(Nullable<int> productMeasurementTypeID, string productMeasurementTypeName)
        {
            var productMeasurementTypeIDParameter = productMeasurementTypeID.HasValue ?
                new ObjectParameter("ProductMeasurementTypeID", productMeasurementTypeID) :
                new ObjectParameter("ProductMeasurementTypeID", typeof(int));
    
            var productMeasurementTypeNameParameter = productMeasurementTypeName != null ?
                new ObjectParameter("ProductMeasurementTypeName", productMeasurementTypeName) :
                new ObjectParameter("ProductMeasurementTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ProductMeasurementTypes_Update", productMeasurementTypeIDParameter, productMeasurementTypeNameParameter);
        }
    
        public virtual ObjectResult<USP_SecurityLevels_All_Result> USP_SecurityLevels_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SecurityLevels_All_Result>("USP_SecurityLevels_All");
        }
    
        public virtual int USP_SecurityLevels_Delete(Nullable<int> securityLevelID)
        {
            var securityLevelIDParameter = securityLevelID.HasValue ?
                new ObjectParameter("SecurityLevelID", securityLevelID) :
                new ObjectParameter("SecurityLevelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SecurityLevels_Delete", securityLevelIDParameter);
        }
    
        public virtual ObjectResult<USP_SecurityLevels_Get_Result> USP_SecurityLevels_Get(Nullable<int> securityLevelID)
        {
            var securityLevelIDParameter = securityLevelID.HasValue ?
                new ObjectParameter("SecurityLevelID", securityLevelID) :
                new ObjectParameter("SecurityLevelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SecurityLevels_Get_Result>("USP_SecurityLevels_Get", securityLevelIDParameter);
        }
    
        public virtual ObjectResult<USP_SecurityLevels_GetByUserTypeID_Result> USP_SecurityLevels_GetByUserTypeID(Nullable<int> userTypeID)
        {
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SecurityLevels_GetByUserTypeID_Result>("USP_SecurityLevels_GetByUserTypeID", userTypeIDParameter);
        }
    
        public virtual int USP_SecurityLevels_Insert(string securityLevelName, Nullable<int> userTypeID, ObjectParameter securityLevelID)
        {
            var securityLevelNameParameter = securityLevelName != null ?
                new ObjectParameter("SecurityLevelName", securityLevelName) :
                new ObjectParameter("SecurityLevelName", typeof(string));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SecurityLevels_Insert", securityLevelNameParameter, userTypeIDParameter, securityLevelID);
        }
    
        public virtual int USP_SecurityLevels_Update(Nullable<int> securityLevelID, string securityLevelName, Nullable<int> userTypeID, Nullable<bool> pageView, Nullable<bool> pageEdit, Nullable<int> pageId)
        {
            var securityLevelIDParameter = securityLevelID.HasValue ?
                new ObjectParameter("SecurityLevelID", securityLevelID) :
                new ObjectParameter("SecurityLevelID", typeof(int));
    
            var securityLevelNameParameter = securityLevelName != null ?
                new ObjectParameter("SecurityLevelName", securityLevelName) :
                new ObjectParameter("SecurityLevelName", typeof(string));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var pageViewParameter = pageView.HasValue ?
                new ObjectParameter("PageView", pageView) :
                new ObjectParameter("PageView", typeof(bool));
    
            var pageEditParameter = pageEdit.HasValue ?
                new ObjectParameter("PageEdit", pageEdit) :
                new ObjectParameter("PageEdit", typeof(bool));
    
            var pageIdParameter = pageId.HasValue ?
                new ObjectParameter("PageId", pageId) :
                new ObjectParameter("PageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SecurityLevels_Update", securityLevelIDParameter, securityLevelNameParameter, userTypeIDParameter, pageViewParameter, pageEditParameter, pageIdParameter);
        }
    
        public virtual ObjectResult<USP_Suppliers_All_Result> USP_Suppliers_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Suppliers_All_Result>("USP_Suppliers_All");
        }
    
        public virtual int USP_Suppliers_Delete(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Suppliers_Delete", supplierIDParameter);
        }
    
        public virtual ObjectResult<USP_Suppliers_Get_Result> USP_Suppliers_Get(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Suppliers_Get_Result>("USP_Suppliers_Get", supplierIDParameter);
        }
    
        public virtual int USP_Suppliers_Insert(string companyName, string contactName, string contactTitle, string address, string city, string region, string postalCode, string country, string phone, string fax, string homePage, string email, string companyUCCprefix, ObjectParameter supplierID)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactTitleParameter = contactTitle != null ?
                new ObjectParameter("ContactTitle", contactTitle) :
                new ObjectParameter("ContactTitle", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var homePageParameter = homePage != null ?
                new ObjectParameter("HomePage", homePage) :
                new ObjectParameter("HomePage", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyUCCprefixParameter = companyUCCprefix != null ?
                new ObjectParameter("CompanyUCCprefix", companyUCCprefix) :
                new ObjectParameter("CompanyUCCprefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Suppliers_Insert", companyNameParameter, contactNameParameter, contactTitleParameter, addressParameter, cityParameter, regionParameter, postalCodeParameter, countryParameter, phoneParameter, faxParameter, homePageParameter, emailParameter, companyUCCprefixParameter, supplierID);
        }
    
        public virtual int USP_Suppliers_Update(Nullable<int> supplierID, string companyName, string contactName, string contactTitle, string address, string city, string region, string postalCode, string country, string phone, string fax, string homePage, string email, string companyUCCprefix)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactTitleParameter = contactTitle != null ?
                new ObjectParameter("ContactTitle", contactTitle) :
                new ObjectParameter("ContactTitle", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var homePageParameter = homePage != null ?
                new ObjectParameter("HomePage", homePage) :
                new ObjectParameter("HomePage", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyUCCprefixParameter = companyUCCprefix != null ?
                new ObjectParameter("CompanyUCCprefix", companyUCCprefix) :
                new ObjectParameter("CompanyUCCprefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Suppliers_Update", supplierIDParameter, companyNameParameter, contactNameParameter, contactTitleParameter, addressParameter, cityParameter, regionParameter, postalCodeParameter, countryParameter, phoneParameter, faxParameter, homePageParameter, emailParameter, companyUCCprefixParameter);
        }
    
        public virtual ObjectResult<USP_Users_All_Result> USP_Users_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Users_All_Result>("USP_Users_All");
        }
    
        public virtual int USP_Users_Delete(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Users_Delete", userIDParameter);
        }
    
        public virtual ObjectResult<USP_Users_Get_Result> USP_Users_Get(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Users_Get_Result>("USP_Users_Get", userIDParameter);
        }
    
        public virtual ObjectResult<USP_Users_GetByReferenceID_Result> USP_Users_GetByReferenceID(Nullable<int> referenceID)
        {
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Users_GetByReferenceID_Result>("USP_Users_GetByReferenceID", referenceIDParameter);
        }
    
        public virtual ObjectResult<USP_Users_GetBySecurityLevelAndReference_Result> USP_Users_GetBySecurityLevelAndReference(Nullable<int> securityLevelID, Nullable<int> referenceID)
        {
            var securityLevelIDParameter = securityLevelID.HasValue ?
                new ObjectParameter("SecurityLevelID", securityLevelID) :
                new ObjectParameter("SecurityLevelID", typeof(int));
    
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Users_GetBySecurityLevelAndReference_Result>("USP_Users_GetBySecurityLevelAndReference", securityLevelIDParameter, referenceIDParameter);
        }
    
        public virtual ObjectResult<USP_Users_GetBySecurityLevelID_Result> USP_Users_GetBySecurityLevelID(Nullable<int> securityLevelID, Nullable<int> supplierID)
        {
            var securityLevelIDParameter = securityLevelID.HasValue ?
                new ObjectParameter("SecurityLevelID", securityLevelID) :
                new ObjectParameter("SecurityLevelID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Users_GetBySecurityLevelID_Result>("USP_Users_GetBySecurityLevelID", securityLevelIDParameter, supplierIDParameter);
        }
    
        public virtual ObjectResult<USP_Users_GetByUserTypeID_Result> USP_Users_GetByUserTypeID(Nullable<int> userTypeID, Nullable<int> supplierID)
        {
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Users_GetByUserTypeID_Result>("USP_Users_GetByUserTypeID", userTypeIDParameter, supplierIDParameter);
        }
    
        public virtual int USP_Users_Insert(string loginName, string password, Nullable<int> userTypeID, Nullable<int> referenceID, Nullable<int> securityLevelID, string lastName, string firstName, string title, string titleOfCourtesy, Nullable<System.DateTime> birthDate, Nullable<System.DateTime> hireDate, string address, string city, string region, string postalCode, string country, string homePhone, string extension, string notes, Nullable<int> reportsTo, string email, Nullable<bool> active, ObjectParameter userID)
        {
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            var securityLevelIDParameter = securityLevelID.HasValue ?
                new ObjectParameter("SecurityLevelID", securityLevelID) :
                new ObjectParameter("SecurityLevelID", typeof(int));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var titleOfCourtesyParameter = titleOfCourtesy != null ?
                new ObjectParameter("TitleOfCourtesy", titleOfCourtesy) :
                new ObjectParameter("TitleOfCourtesy", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var reportsToParameter = reportsTo.HasValue ?
                new ObjectParameter("ReportsTo", reportsTo) :
                new ObjectParameter("ReportsTo", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Users_Insert", loginNameParameter, passwordParameter, userTypeIDParameter, referenceIDParameter, securityLevelIDParameter, lastNameParameter, firstNameParameter, titleParameter, titleOfCourtesyParameter, birthDateParameter, hireDateParameter, addressParameter, cityParameter, regionParameter, postalCodeParameter, countryParameter, homePhoneParameter, extensionParameter, notesParameter, reportsToParameter, emailParameter, activeParameter, userID);
        }
    
        public virtual ObjectResult<USP_Users_Login_Result> USP_Users_Login(string loginName, string password)
        {
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Users_Login_Result>("USP_Users_Login", loginNameParameter, passwordParameter);
        }
    
        public virtual int USP_Users_Update(Nullable<int> userID, string loginName, string password, Nullable<int> userTypeID, Nullable<int> referenceID, Nullable<int> securityLevelID, string lastName, string firstName, string title, string titleOfCourtesy, Nullable<System.DateTime> birthDate, Nullable<System.DateTime> hireDate, string address, string city, string region, string postalCode, string country, string homePhone, string extension, string notes, Nullable<int> reportsTo, string email, Nullable<bool> active)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            var securityLevelIDParameter = securityLevelID.HasValue ?
                new ObjectParameter("SecurityLevelID", securityLevelID) :
                new ObjectParameter("SecurityLevelID", typeof(int));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var titleOfCourtesyParameter = titleOfCourtesy != null ?
                new ObjectParameter("TitleOfCourtesy", titleOfCourtesy) :
                new ObjectParameter("TitleOfCourtesy", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var reportsToParameter = reportsTo.HasValue ?
                new ObjectParameter("ReportsTo", reportsTo) :
                new ObjectParameter("ReportsTo", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Users_Update", userIDParameter, loginNameParameter, passwordParameter, userTypeIDParameter, referenceIDParameter, securityLevelIDParameter, lastNameParameter, firstNameParameter, titleParameter, titleOfCourtesyParameter, birthDateParameter, hireDateParameter, addressParameter, cityParameter, regionParameter, postalCodeParameter, countryParameter, homePhoneParameter, extensionParameter, notesParameter, reportsToParameter, emailParameter, activeParameter);
        }
    
        public virtual ObjectResult<USP_UserTypes_All_Result> USP_UserTypes_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_UserTypes_All_Result>("USP_UserTypes_All");
        }
    
        public virtual int USP_UserTypes_Delete(Nullable<int> userTypeID)
        {
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UserTypes_Delete", userTypeIDParameter);
        }
    
        public virtual ObjectResult<USP_UserTypes_Get_Result> USP_UserTypes_Get(Nullable<int> userTypeID)
        {
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_UserTypes_Get_Result>("USP_UserTypes_Get", userTypeIDParameter);
        }
    
        public virtual int USP_UserTypes_Insert(string userTypeName, ObjectParameter userTypeID)
        {
            var userTypeNameParameter = userTypeName != null ?
                new ObjectParameter("UserTypeName", userTypeName) :
                new ObjectParameter("UserTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UserTypes_Insert", userTypeNameParameter, userTypeID);
        }
    
        public virtual int USP_UserTypes_Update(Nullable<int> userTypeID, string userTypeName)
        {
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var userTypeNameParameter = userTypeName != null ?
                new ObjectParameter("UserTypeName", userTypeName) :
                new ObjectParameter("UserTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UserTypes_Update", userTypeIDParameter, userTypeNameParameter);
        }
    
        public virtual ObjectResult<USP_User_Login_Result1> USP_User_Login(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_User_Login_Result1>("USP_User_Login", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<USP_FarmDashboard_ByCategory_Result> USP_FarmDashboard_ByCategory(string year, string month)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FarmDashboard_ByCategory_Result>("USP_FarmDashboard_ByCategory", yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<USP_FarmDashboard_ByLot_Result> USP_FarmDashboard_ByLot(string year, string month)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FarmDashboard_ByLot_Result>("USP_FarmDashboard_ByLot", yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<USP_FarmDashboard_ByStages_Result> USP_FarmDashboard_ByStages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FarmDashboard_ByStages_Result>("USP_FarmDashboard_ByStages");
        }
    
        public virtual ObjectResult<USP_FarmDashboard_HF_Result> USP_FarmDashboard_HF()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FarmDashboard_HF_Result>("USP_FarmDashboard_HF");
        }
    
        public virtual ObjectResult<USP_FarmDashboard_Raw_Result> USP_FarmDashboard_Raw(string year, string month)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FarmDashboard_Raw_Result>("USP_FarmDashboard_Raw", yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<USP_FarmDashboard_Summary_Result> USP_FarmDashboard_Summary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FarmDashboard_Summary_Result>("USP_FarmDashboard_Summary");
        }
    }
}
